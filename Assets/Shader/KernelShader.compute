// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel UpdateVertex
#pragma kernel UpdateSegment

#include "CurlNoise.cginc"
struct TorusVertex
{
	float3 pos;
	float3 prev_pos;
	float3 normal;
	float3 prev_normal;
	float2 uv;
};

struct Segment
{
	float3 pos;
	float3 prev_pos;
};

float _NumOfSlide;
float _MaxSegment;
float _Radius;
float _T;

RWStructuredBuffer<Segment> _SegmentBuffer;
RWStructuredBuffer<TorusVertex> _VertexBuffer;

float4 LookAt(float3 forward, float3 up)
{
	forward = normalize(forward);

	float3 v = normalize(forward);
	float3 v2 = cross(up, v);
	float3 v3 = cross(v, v2);

	float m00 = v2.x;
	float m01 = v2.y;
	float m02 = v2.z;
	float m10 = v3.x;
	float m11 = v3.y;
	float m12 = v3.z;
	float m20 = v.x;
	float m21 = v.y;
	float m22 = v.z;

	float num8 = (m00 + m11) + m22;
	float4 quaternion = float4(0, 0, 0, 0);
	if (num8 > 0)
	{
		float num = sqrt(num8 + 1.0);
		quaternion.w = num * 0.5;
		num = 0.5 / num;
		quaternion.x = (m12 - m21) * num;
		quaternion.y = (m20 - m02) * num;
		quaternion.z = (m01 - m10) * num;
		return quaternion;
	}
	if ((m00 >= m11) && (m00 >= m22))
	{
		float num7 = sqrt(((1 + m00) - m11) - m22);
		float num4 = 0.5 / num7;
		quaternion.x = 0.5 * num7;
		quaternion.y = (m01 + m10) * num4;
		quaternion.z = (m02 + m20) * num4;
		quaternion.w = (m12 - m21) * num4;
		return quaternion;
	}
	if (m11 > m22)
	{
		float num6 = sqrt(((1 + m11) - m00) - m22);
		float num3 = 0.5 / num6;
		quaternion.x = (m10 + m01) * num3;
		quaternion.y = 0.5 * num6;
		quaternion.z = (m21 + m12) * num3;
		quaternion.w = (m20 - m02) * num3;
		return quaternion;
	}
	float num5 = sqrt(((1 + m22) - m00) - m11);
	float num2 = 0.5 / num5;
	quaternion.x = (m20 + m02) * num2;
	quaternion.y = (m21 + m12) * num2;
	quaternion.z = 0.5 * num5;
	quaternion.w = (m01 - m10) * num2;
	return quaternion;
}

float4 qmul(float4 q1, float4 q2)
{
	return float4(
		q2.xyz * q1.w + q1.xyz * q2.w + cross(q1.xyz, q2.xyz),
		q1.w * q2.w - dot(q1.xyz, q2.xyz)
		);
}

float3 RotateWithQuaternion(float3 v, float4 r)
{
	float4 r_c = r * float4(-1.0, -1.0, -1.0, 1.0);
	return qmul(r, qmul(float4(v, 0.0), r_c)).xyz;
}

float3 RotateAroundPoint(float3 position, float3 axis, float4 angle)
{
	return RotateWithQuaternion((position - axis), angle) + axis;
}

float3 GetNormal(float3 prev_position, float3 position, float3 prev_normal)
{
	float3 direction = normalize(prev_position - position);

	if (length(direction) == 0)
		direction = float3(0, 1, 0);

	float4 lookAt = LookAt(direction, prev_normal);

	return RotateWithQuaternion(float3(0, 1, 0), lookAt);
}
//
//float4 GetAngleAxisRotation(float3 axis, float angle) {
//	axis = normalize(axis);
//	float s, c;
//	sincos(angle, s, c);
//	return float4(axis.x*s, axis.y*s, axis.z*s, c);
//}

//float4 RotateAngleAxis(float3 axis, float angle) {
//	return GetAngleAxisRotation(axis, angle);
//}

float4 AngleAxis(float3 axis, float degrees) {

	float4 result;
	float angle = degrees * 3.14159 / 180.0;
	angle *= 0.5;

	axis = normalize(axis);
	axis = axis * sin(angle);
	result.x = axis.x;
	result.y = axis.y;
	result.z = axis.z;
	result.w = cos(angle);

	return normalize(result);
}

[numthreads(8,1,1)]
void UpdateVertex (uint id : SV_DispatchThreadID)
{
	TorusVertex tv = _VertexBuffer[id];

	int index = id / (_NumOfSlide * _MaxSegment);
	int numOfSlide = _NumOfSlide;

	int indexOfSegment = id / numOfSlide;
	int indexOfSide = id % numOfSlide;

	float radius = _Radius;

	float3 position = _SegmentBuffer[indexOfSegment].pos;// prev_position + nnoise;

	float3 prev_position = 0;// prev_position + nnoise;
	if(indexOfSegment > 0)
		prev_position = _SegmentBuffer[indexOfSegment-1].pos;// prev_position + nnoise;

	float3 direction = prev_position - position;

	if (length(direction) > 0)
	{
		direction = normalize(direction);
		float4 rr = AngleAxis(direction, (float)indexOfSide * (360 / numOfSlide));

		float3 nor = GetNormal(prev_position, position, _VertexBuffer[id].prev_normal);
		float3 pos = RotateAroundPoint(position + nor * radius, position, rr);

		_VertexBuffer[id].pos = pos;
		_VertexBuffer[id].prev_pos = position;
		_VertexBuffer[id].normal = normalize(pos - position);
		_VertexBuffer[id].prev_normal = nor;
		_VertexBuffer[id].uv = float2(1, 1);
	}
}

[numthreads(8, 1, 1)]
void UpdateSegment(uint id : SV_DispatchThreadID)
{
	float noise = curlNoise(float3(0,id,0) * 0.05) * 0.1;//
	float3 nnoise = noise + float3(0, 1, 0);// velocity;

	float3 position = _SegmentBuffer[id].pos;// prev_position + nnoise;
	_SegmentBuffer[id].prev_pos = position;

	position += float3(0.01, 0, 0);// nnoise;
	_SegmentBuffer[id].pos = position;
}
