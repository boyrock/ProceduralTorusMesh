// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel UpdateVertex
#pragma kernel ApplyNoise
#pragma kernel InitSegment

#include "CurlNoise.cginc"
#include "Quaternion.cginc"

struct TorusVertex
{
	float3 pos;
	float3 normal;
	float2 uv;
};

struct Segment
{
	float3 initPos;
	float3 pos;
	float3 direction;
	float3 normal;
};

float _NumOfSlide;
float _MaxSegment;
float _Radius;
float _T;
float _Time;
float _NoiseFreq;


RWStructuredBuffer<Segment> _SegmentBuffer;
RWStructuredBuffer<TorusVertex> _VertexBuffer;

float3 GetNormal(float3 direction, float3 position, float3 prev_normal)
{
	if (length(direction) == 0)
		direction = float3(0, 0, 0);

	float4 lookAt = LookAt(direction, prev_normal);

	return RotateWithQuaternion(float3(0, 1, 0), lookAt);
}

[numthreads(8,1,1)]
void UpdateVertex (uint id : SV_DispatchThreadID)
{
	TorusVertex tv = _VertexBuffer[id];

	int numOfSlide = _NumOfSlide;

	int indexOfSegment = id / numOfSlide;
	int indexOfSide = id % numOfSlide;

	float radius = _Radius;

	float3 position = _SegmentBuffer[indexOfSegment].pos;
	float3 direction = _SegmentBuffer[indexOfSegment].direction;
	float3 normal = _SegmentBuffer[indexOfSegment].normal;
	
	float4 rr = AngleAxis(direction, (float)indexOfSide * (360 / numOfSlide));
	float3 pos = RotateAroundPoint(position + normal * radius, position, rr);

	float t = (sin(_Time * 0.5 + (indexOfSegment / (_MaxSegment + 1)) * 0.01) + 1 ) * 0.5;

	if (indexOfSegment % (_MaxSegment + 1) / _MaxSegment < (t * _T))
	{
		_VertexBuffer[id].pos = pos;
		_VertexBuffer[id].normal = normalize(pos - position);
		_VertexBuffer[id].uv = float2(1, 1);
	}
	else
	{
		_VertexBuffer[id].pos = _SegmentBuffer[indexOfSegment-1].pos;
	}
}

[numthreads(8, 1, 1)]
void ApplyNoise(uint id : SV_DispatchThreadID)
{
	_SegmentBuffer[id].pos = _SegmentBuffer[id].initPos + cnoise(float3(_SegmentBuffer[id].initPos.yz * _NoiseFreq, _Time * 0.3)) * 4 * _NoiseFreq;// position;
}

[numthreads(16, 1, 1)]
void InitSegment(uint id : SV_DispatchThreadID)
{
	int index = id;

	float3 iniPos = float3(index, index, index);
	float3 prev_pos = 0;
	float3 prev_normal = 0;

	int segmentNum = _MaxSegment + 1;
	
	for (int i = 0; i < segmentNum; i++)
	{
		int ii = id * segmentNum + i;

		prev_pos = _SegmentBuffer[ii - 1].pos;
		prev_normal = _SegmentBuffer[ii - 1].normal;

		float3 noise = curlNoise((iniPos * 0.15 + prev_pos) * 0.025) * 0.8;
		float3 nnoise = noise;

		float3 position = prev_pos + nnoise;
		float3 direction = normalize(prev_pos - position);
		float3 normal = GetNormal(direction, position, prev_normal);

		_SegmentBuffer[ii].initPos = position;
		_SegmentBuffer[ii].pos = position;
		_SegmentBuffer[ii].direction = direction;
		_SegmentBuffer[ii].normal = normal;
	}
}
